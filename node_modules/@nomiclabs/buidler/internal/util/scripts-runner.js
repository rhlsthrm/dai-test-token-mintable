"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const path_1 = __importDefault(require("path"));
const execution_mode_1 = require("../core/execution-mode");
const env_variables_1 = require("../core/params/env-variables");
const log = debug_1.default("buidler:core:scripts-runner");
async function runScript(scriptPath, scriptArgs = [], extraNodeArgs = [], extraEnvVars = {}) {
    const { fork } = await Promise.resolve().then(() => __importStar(require("child_process")));
    return new Promise((resolve, reject) => {
        const nodeArgs = [
            ...process.execArgv,
            ...getTsNodeArgsIfNeeded(),
            ...extraNodeArgs
        ];
        const childProcess = fork(scriptPath, scriptArgs, {
            stdio: "inherit",
            execArgv: nodeArgs,
            env: Object.assign({}, process.env, extraEnvVars)
        });
        childProcess.once("close", status => {
            log(`Script ${scriptPath} exited with status code ${status}`);
            resolve(status);
        });
        childProcess.once("error", reject);
    });
}
exports.runScript = runScript;
async function runScriptWithBuidler(buidlerArguments, scriptPath, scriptArgs = [], extraNodeArgs = [], extraEnvVars = {}) {
    log(`Creating Buidler subprocess to run ${scriptPath}`);
    return runScript(scriptPath, scriptArgs, [
        ...extraNodeArgs,
        "--require",
        path_1.default.join(__dirname, "..", "..", "register")
    ], Object.assign({}, env_variables_1.getEnvVariablesMap(buidlerArguments), extraEnvVars));
}
exports.runScriptWithBuidler = runScriptWithBuidler;
function getTsNodeArgsIfNeeded() {
    if (execution_mode_1.getExecutionMode() !== execution_mode_1.ExecutionMode.EXECUTION_MODE_TS_NODE_TESTS) {
        return [];
    }
    const extraNodeArgs = [];
    if (!process.execArgv.includes("ts-node/register")) {
        extraNodeArgs.push("--require");
        extraNodeArgs.push("ts-node/register");
    }
    return extraNodeArgs;
}
//# sourceMappingURL=scripts-runner.js.map