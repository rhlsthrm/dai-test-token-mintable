/// <reference types="bn.js" />
/// <reference types="node" />
import { BN } from "ethereumjs-util";
import * as t from "io-ts";
export declare const rpcQuantity: t.Type<BN, BN, unknown>;
export declare const rpcData: t.Type<Buffer, Buffer, unknown>;
export declare const rpcHash: t.Type<Buffer, Buffer, unknown>;
export declare const rpcUnknown: t.UnknownC;
export declare const rpcAddress: t.Type<Buffer, Buffer, unknown>;
export declare const optionalBlockTag: t.UnionC<[t.Type<BN, BN, unknown>, t.KeyofC<{
    earliest: null;
    latest: null;
    pending: null;
}>, t.UndefinedC]>;
export declare type OptionalBlockTag = t.TypeOf<typeof optionalBlockTag>;
export declare const rpcTransactionRequest: t.TypeC<{
    from: t.Type<Buffer, Buffer, unknown>;
    to: t.Type<Buffer | undefined, Buffer | undefined, unknown>;
    gas: t.Type<BN | undefined, BN | undefined, unknown>;
    gasPrice: t.Type<BN | undefined, BN | undefined, unknown>;
    value: t.Type<BN | undefined, BN | undefined, unknown>;
    data: t.Type<Buffer | undefined, Buffer | undefined, unknown>;
    nonce: t.Type<BN | undefined, BN | undefined, unknown>;
}>;
export interface RpcTransactionRequestInput {
    from: string;
    to?: string;
    gas?: string;
    gasPrice?: string;
    value?: string;
    data?: string;
    nonce?: string;
}
export declare type RpcTransactionRequest = t.TypeOf<typeof rpcTransactionRequest>;
export declare const rpcCallRequest: t.TypeC<{
    from: t.Type<Buffer | undefined, Buffer | undefined, unknown>;
    to: t.Type<Buffer | undefined, Buffer | undefined, unknown>;
    gas: t.Type<BN | undefined, BN | undefined, unknown>;
    gasPrice: t.Type<BN | undefined, BN | undefined, unknown>;
    value: t.Type<BN | undefined, BN | undefined, unknown>;
    data: t.Type<Buffer | undefined, Buffer | undefined, unknown>;
}>;
export interface RpcCallRequestInput {
    from?: string;
    to: string;
    gas?: string;
    gasPrice?: string;
    value?: string;
    data?: string;
}
export declare type RpcCallRequest = t.TypeOf<typeof rpcCallRequest>;
export declare function validateParams(params: any[]): [];
export declare function validateParams(params: any[], addr: typeof rpcAddress, data: typeof rpcData): [Buffer, Buffer];
export declare function validateParams(params: any[], addr: typeof rpcAddress, block: typeof optionalBlockTag): [Buffer, OptionalBlockTag];
export declare function validateParams(params: any[], addr: typeof rpcAddress, slot: typeof rpcQuantity, block: typeof optionalBlockTag): [Buffer, BN, OptionalBlockTag];
export declare function validateParams(params: any[], data: typeof rpcData): [Buffer];
export declare function validateParams(params: any[], tx: typeof rpcTransactionRequest): [RpcTransactionRequest];
export declare function validateParams(params: any[], call: typeof rpcCallRequest, block: typeof optionalBlockTag): [RpcCallRequest, OptionalBlockTag];
export declare function validateParams(params: any[], call: typeof rpcTransactionRequest, block: typeof optionalBlockTag): [RpcTransactionRequest, OptionalBlockTag];
export declare function validateParams(params: any[], num: typeof t.number): [number];
export declare function validateParams(params: any[], hash: typeof rpcHash, bool: typeof t.boolean): [Buffer, boolean];
export declare function validateParams(params: any[], tag: typeof optionalBlockTag, bool: typeof t.boolean): [OptionalBlockTag, boolean];
export declare function validateParams(params: any[], num: typeof rpcQuantity, bool: typeof t.boolean): [BN, boolean];
export declare function validateParams(params: any[], num: typeof rpcQuantity): [BN];
export declare function validateParams(params: any[], hash: typeof rpcHash, num: typeof rpcQuantity): [Buffer, BN];
export declare function validateParams(params: any[], num1: typeof rpcQuantity, num2: typeof rpcQuantity): [BN, BN];
export declare function validateParams(params: any[], addr: typeof rpcAddress, data: typeof rpcUnknown): [Buffer, any];
export declare function validateParams(params: any[], number: typeof rpcQuantity): [BN];
//# sourceMappingURL=input.d.ts.map