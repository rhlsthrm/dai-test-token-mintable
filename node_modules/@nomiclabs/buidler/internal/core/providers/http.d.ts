/// <reference types="node" />
import { EventEmitter } from "events";
export interface JsonRpcRequest {
    jsonrpc: string;
    method: string;
    params: any[];
    id: number;
}
interface SuccessfulJsonRpcResponse {
    jsonrpc: string;
    id: number;
    result: any;
}
interface FailedJsonRpcResponse {
    jsonrpc: string;
    id: number;
    error: {
        code: number;
        message: string;
        data?: any;
    };
}
export declare type JsonRpcResponse = SuccessfulJsonRpcResponse | FailedJsonRpcResponse;
export declare class HttpProvider extends EventEmitter {
    private readonly _url;
    private readonly _networkName;
    private readonly _extraHeaders;
    private readonly _timeout;
    private _nextRequestId;
    constructor(_url: string, _networkName: string, _extraHeaders?: {
        [name: string]: string;
    }, _timeout?: number);
    send(method: string, params?: any[]): Promise<any>;
    private _fetchJsonRpcResponse;
    private _getJsonRpcRequest;
}
export declare function isValidJsonResponse(payload: any): boolean;
export {};
//# sourceMappingURL=http.d.ts.map