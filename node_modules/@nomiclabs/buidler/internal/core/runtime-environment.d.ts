import { BuidlerArguments, BuidlerRuntimeEnvironment, EnvironmentExtender, EthereumProvider, Network, ResolvedBuidlerConfig, RunTaskFunction, TasksMap } from "../../types";
export declare class Environment implements BuidlerRuntimeEnvironment {
    readonly config: ResolvedBuidlerConfig;
    readonly buidlerArguments: BuidlerArguments;
    readonly tasks: TasksMap;
    private static readonly _BLACKLISTED_PROPERTIES;
    /**
     * An EIP1193 Ethereum provider.
     */
    ethereum: EthereumProvider;
    network: Network;
    private readonly _extenders;
    /**
     * Initializes the Buidler Runtime Environment and the given
     * extender functions.
     *
     * @remarks The extenders' execution order is given by the order
     * of the requires in the buidler's config file and its plugins.
     *
     * @param config The buidler's config object.
     * @param buidlerArguments The parsed buidler's arguments.
     * @param tasks A map of tasks.
     * @param extenders A list of extenders.
     */
    constructor(config: ResolvedBuidlerConfig, buidlerArguments: BuidlerArguments, tasks: TasksMap, extenders?: EnvironmentExtender[]);
    /**
     * Executes the task with the given name.
     *
     * @param name The task's name.
     * @param taskArguments A map of task's arguments.
     *
     * @throws a BDLR303 if there aren't any defined tasks with the given name.
     * @returns a promise with the task's execution result.
     */
    readonly run: RunTaskFunction;
    /**
     * Injects the properties of `this` (the Buidler Runtime Environment) into the global scope.
     *
     * @param blacklist a list of property names that won't be injected.
     *
     * @returns a function that restores the previous environment.
     */
    injectToGlobal(blacklist?: string[]): () => void;
    private _runTaskDefinition;
}
//# sourceMappingURL=runtime-environment.d.ts.map